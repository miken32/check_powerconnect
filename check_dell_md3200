#!/usr/bin/php
<?php

$progname = "check_dell_md3200";
//base path for the smcli client
$smcli = "/opt/dell/mdstoragesoftware/mdstoragemanager/client/SMcli";

//Exit codes
$exit_OK = 0;
$exit_W = 1;
$exit_E = 2;
$exit_U = 3;
$exit_code = 0;

$shortopts = "a:r:";
$longopts = ["help", "c1:", "c2:", "mode:", "debug-no", "debug", "md3000", "battery", "power", "sectors", "hotspare", "health", "only-totals", "no-totals", "summary", "path", "perf", "vd", "no-ping-check"];
$opts = getopt($shortopts, $longopts);

if (isset($opts["help"])) {
    help();
}

//options
$ctrl1 = isset($opts["c1"]) ? $opts["c1"] : "";
$ctrl2 = isset($opts["c2"]) ? $opts["c2"] : "";
$mode = isset($opts["mode"]) ? $opts["mode"] : "";
$path = isset($opts["path"]);
$perf = isset($opts["perf"]);
$otot = isset($opts["only-totals"]);
$ntot = isset($opts["no-totals"]);
$summ = isset($opts["summary"]);
$battery = isset($opts["battery"]);
$health = isset($opts["health"]);
$sectors = isset($opts["sectors"]);
$power = isset($opts["power"]);
$debug = isset($opts["debug"]);
$mode = isset($opts["mode"]) ? $opts["mode"] : "";
$noout = isset($opts["debug-no"]);
$hotspare = isset($opts["hotspare"]);
$md3000 = isset($opts["md3000"]);
$ping = !isset($opts["no-ping-check"]);
$argAdd = isset($opts["a"]) ? "/" . str_replace("/", "\\/", $opts["a"]) . "/" : "";
$argDel = isset($opts["r"]) ? "/" . str_replace("/", "\\/", $opts["r"]) . "/" : "";

//output
$output_msg = "";

//Regular expressions
//Storage array regular expressions
$regSAHealthComponent = "/Component reporting problem: ([A-Z,a-z,0-9, ]+)/";
$regSAHealthStatus = "/Status: ([A-Z,a-z,0-9, ]+)/";
$regSABatteryStatus = "/Battery status: ([A-Z,a-z,0-9, ]+)/";
$regSABatteryLocation = "/Location: RAID Controller Module in slot ([0-9])/";
$regSAPowerInfoSection = "/Total power drawn: ([0-9]+)/";
$regSAPowerInfos = "/([0-9]+)\s+([0-9]+)\s+([0-9]+) Watts/";

//Virtual disks regular expressions
$regVDName = "/Virtual Disk name: ([A-Z,a-z,0-9,\-]+)/";
$regVDPathPref = "/Preferred owner is RAID controller module in slot: ([A-Z,a-z,0-9,\-]+)/";
$regVDPathCurr = "/Current owner is RAID controller module in slot: ([A-Z,a-z,0-9,\-]+)/";
$regVDPerfValues = "/Virtual Disk ([A-Z,a-z,0-9_]+)/";
if ($md3000) {
    $regVDPerfHeader = "/\"Storage Arrays \"/";
    $regVDSummValues = "/[A-Z,a-z,0-9]+[ ]+[A-Z,a-z]+[ ]+[0-9\,\.]+/";
} else {
    $regVDPerfHeader = "/Objects/";
    $regVDSummValues = "/[A-Z,a-z,0-9]+[ ]+[A-Z,a-z]+[ ]+[A-Z,a-z]+[ ]+[0-9\,\.]+/";
}

//Hot spare regular expressions
$regHsSection = "/Total hot spare physical disks:\s+(\d+)/";
$regHsStandby = "/Standby:\s+(\d+)/";
$regHsInuse = "/In use:\s+(\d+)/";

//sets default exit / state info to unknown. So if a path forgets to set it, it is set to unknown by default.
$state = "UNKNOWN";
$exit_code = $exit_U;

//check if controllers can be reached
if ($ping) {
    if ($ctrl1 && !isAlive($ctrl1)) {
        //remove if not alive
        $ctrl1 = "";
    }
    if ($ctrl2 && !isAlive($ctrl2)) {
        //remove if not alive
        $ctrl2 = "";
    }
}
//exit if none of the controllers are reachable
if (!$ctrl1 || !$ctrl2) {
    display_output($exit_code, "UNKNOWN - unable to reach either controller");
}

//parsing section
$cmds = array();

if ($debug) {
    //$mode = "virtualdisks";
    $perf = true;
    $summ = true;
    $health = true;
}

if ($health) { //if the global health is asked for, then check the battery, the sectors, the power, ...
    $battery = true;
    $sectors = true;
    $power = true;
    $summ = true;
    $path = true;
    $hotspare = true;
}

if ($md3000) {
    $power = false;
}

if ($health) {
    $cmds[] = "show \"$progname start healthstatus\"";
    $cmds[] = "show storagearray healthstatus";
    $cmds[] = "show \"$progname stop healthstatus\"";
}
if ($battery) {
    $cmds[] = "show \"$progname start batteryage\"";
    $cmds[] = "show storagearray batteryage";
    $cmds[] = "show \"$progname stop batteryage\"";
}
if ($summ || $mode == "virtualdisks") {
    $cmds[] = "show \"$progname start vd summary\"";
    $cmds[] = "show allvirtualdisks summary";
    $cmds[] = "show \"$progname stop vd summary\"";
}
if ($path) {
    $cmds[] = "show \"$progname start vd paths\"";
    $cmds[] = "show storagearray preferredvirtualdiskowners";
    $cmds[] = "show storagearray virtualdiskdistribution";
    $cmds[] = "show \"$progname stop vd paths\"";
}
if ($perf && $mode == "virtualdisks") {
    $cmds[] = "show \"$progname start vd performance\"";
    $cmds[] = "show allvirtualdisks performancestats";
    $cmds[] = "show \"$progname stop vd performance\"";
}
if ($sectors) {
    $cmds[] = "show \"$progname start sectors\"";
    $cmds[] = "show storagearray unreadablesectors";
    $cmds[] = "show \"$progname stop sectors\"";
}
if ($power) {
    $cmds[] = "show \"$progname start power\"";
    $cmds[] = "show storagearray powerinfo";
    $cmds[] = "show \"$progname stop power\"";
}
if ($hotspare) {
    $cmds[] = "show \"$progname start hotspare\"";
    $cmds[] = "show storagearray hotsparecoverage";
    $cmds[] = "show \"$progname stop hotspare\"";
}

$cmds = escapeshellarg(implode(";", $cmds) . ";");
$ctrl1 = escapeshellarg($ctrl1);
$ctrl2 = escapeshellarg($ctrl2);
$cmd = "$smcli $ctrl1 $ctrl2 -S -c $cmds";
exec($cmd, $strLines, $exitcode);

if ($debug ) {
    print "CMD: $cmd\n";
    print "\n----------------- smcli  dump -----------------\n";
    print implode("\n", $strLines);
    print "\n----------------- end of dump -----------------\n";
}

$arrayPath = array();
$perfTotals = array();
$keysPerf = array();
$vdPerformance = array();
$summValues = array();
$perfTotalsC = array();
$pbComp = array();
$currComp = "";
$pbBatt = array();
$currStatus = "";

$arrayVDName = array();
$totalPower = 0;
$powerInfos = array();
$clockInSync = true;
$badSectors = true;
$failures = false;
$failInfo = "";

for ($i = 0; $i < count($strLines); $i++) {
    $curLine = $strLines[$i];
    switch ($curLine) {
    case "$progname start healthstatus":
        do {
            $curLine = $strLines[++$i];
            if (strpos($curLine, "clocks in the storage array are out of synchronization") !== false) {
                //Checks if clocks are out of sync
                $clockInSync = false;
            } elseif (preg_match($regSAHealthComponent, $curLine, $mComp)) {
                //Checks if components are healthy
                $currComp = $mComp[1];
                if (!in_array($currComp, $pbComp)) {
                    $pbComp[] = $currComp;
                }
            } elseif (strpos($curLine, "following failures have been found") !== false) {
                //Checks if failures have been found
                $failures = true;
                $k = 0;
                //because some failures are known.
                while ($strLines[$i+$k] != "") {
                    if ($failInfo != "") {
                        $failInfo .= " - ";
                    }
                    $failInfo .= $strLines[$i+$k];
                    $k++;
                }
            }
        } while ($curLine != "$progname stop healthstatus");
        break;

    case "$progname start batteryage":
        do {
            $curLine = $strLines[++$i];
            if (preg_match($regSABatteryStatus, $curLine, $mBatt)) {
                //Checks if battery are healthy
                $currStatus = $mBatt[1];
                $currLoc = "";
                $curLine = $strLines[++$i];
                if (preg_match($regSABatteryLocation, $curLine, $mBattLoc)) {
                    //Retrieves location of battery
                    $currLoc = $mBattLoc[1];
                }
                $pbBatt[] = ["s" => $currStatus, "l" => $currLoc];
            }
        } while ($curLine != "$progname stop batteryage");
        break;

    case "$progname start sectors":
        do {
            $curLine = $strLines[++$i];
            if (strpos($curLine, "currently no unreadable sectors on the storage array") !== false) {
                //Checks if all sectors are OK
                $badSectors = false;
            }
        } while ($curLine != "$progname stop sectors");
        break;

    case "$progname start power":
        do {
            $curLine = $strLines[++$i];
            if (preg_match($regSAPowerInfoSection, $curLine, $mTP)) {
                //Get total power info
                $totalPower = $mTP[1];
            } elseif (preg_match($regSAPowerInfos, $curLine, $mPI)) {
                //Retrieves power information
                $powerInfos[] = ["E"=>$mPI[1], "S"=>$mPI[2], "P"=>$mPI[3]];
            }
        } while ($curLine != "$progname stop power");
        break;

    case "$progname start vd summary":
        $vdName = "";
        do {
            $curLine = $strLines[++$i];
            if (preg_match($regVDSummValues, $curLine)) {
                //Retrieves the summary values of the virtual disks and the name
                $tmpSummValues = explode (" ", preg_replace("/\s{2,}/", " ", $curLine));
                //MD3200: status == 2, capacity = 3+4
                //MD3000: status == 1, capacity = 2+4
                $vdName = $tmpSummValues[0];
                $summValues[$vdName] = $tmpSummValues;
                if (!in_array($vdName, $arrayVDName)) {
                    $arrayVDName[] = $vdName;
                }
            }
        } while ($curLine != "$progname stop vd summary");
        break;

    case "$progname start vd paths":
        $vdName = "";
        do {
            $curLine = $strLines[++$i];
            if (preg_match($regVDName, $curLine, $mVD)) {
                //Retrieves the name of the virtual disk for the path
                $vdName = $mVD[1];
                if (!isset($arrayPath[$vdName])) {
                    $arrayPath[$vdName] = array();
                }
            } elseif ($path) {
                //Retrieves the preferred path
                if (preg_match($regVDPathPref, $curLine, $mPathPref)) {
                    $arrayPath[$vdName]["Pref"] = $mPathPref[1];
                }
                //Retrieves the current path
                if (preg_match($regVDPathCurr, $curLine, $mPathCurr)) {
                    $arrayPath[$vdName]["Curr"] = $mPathCurr[1];
                }
            }
        } while ($curLine != "$progname stop vd paths");
        break;

    case "$progname start vd performance":
        do {
            $curLine = $strLines[++$i];
            if (preg_match($regVDPerfHeader, $curLine)) {
                //retrieves the header names of the virtual disks perf values
                $keysPerf = explode (",", str_replace("\"","",$curLine));
            } elseif (preg_match($regVDPerfValues, $curLine, $mVDID)) {
                //Retrieves the perf values of the virtual disks
                $vdName = $mVDID[1];
                $tmpPerfValues = explode (",", str_replace("\"","",$curLine));
                $vdPerformance[$vdName] = $tmpPerfValues;
            }
        } while ($curLine != "$progname stop vd performance");
        break;

    case "$progname start hotspare":
        $hsValues = array();
        do {
            $curLine = $strLines[++$i];
            if (preg_match($regHsSection, $curLine, $mHsTotal)) {
                //Retrieves total number of hot spares
                $hsValues["total"] = $mHsTotal[1];
            } elseif (preg_match($regHsStandby, $curLine, $mHsStandby)) {
                //Retrieves the number of hot spares in standby mode
                $hsValues["standby"] = $mHsStandby[1];
            } elseif (preg_match($regHsInuse, $curLine, $mHsInuse)) {
                //Retrieves the number of hot spares in use
                $hsValues["inuse"] = $mHsInuse[1];
            }
        } while ($curLine != "$progname stop hotspare");
    }
}

// create the information part of the output
$state = "Optimal";
$infos = "";
$exit_code = $exit_OK;

if ($health) {
    $tmpInfos = "";
    for ($i = 1; $i <= count($pbComp); $i++) {
        $state = "CRITICAL";
        $exit_code = $exit_E;
        if ($tmpInfos != "") {
            $tmpInfos.= ", ";
        }
        $tmpInfos .= $pbComp[$i];
    }
    if ($tmpInfos != "") {
        $infos .= "PB Ctrl: ".$tmpInfos." - ";
    }
    else {
        if ($clockInSync) {
            $infos .= "Ctrl OK - ";
        } else {
            $infos .= "Ctrl Clock Out of Sync - ";
        }
    }
    if ($failures) {
        if ($exit_code != $exit_E) {
            $state = "WARNING";
            $exit_code = $exit_W;
        }
        if ($debug) print "warning due to failures \n";
    }
}
if ($sectors) {
    if ($badSectors) {
        $state = "CRITICAL";
        $exit_code = $exit_E;
        $infos .= "Bad Disk Sectors Detected - ";
    }else{
        $infos .= "Disk Sectors OK - ";
    }
}
if ($battery) {
    $tmpInfos = "";
    for ($i = 0; $i < count($pbBatt); $i++) {
        if ($pbBatt[$i]["s"] != "Optimal") {
            if ($exit_code != $exit_E) {
                $state = "WARNING";
                $exit_code = $exit_W;
                if ($debug) print "warning due to battery \n";
            }
            if ($tmpInfos != "") {
                $tmpInfos.= ", ";
            }
            $tmpInfos .= $pbBatt[$i]["l"];
        }
    }
    if ($tmpInfos != "") {
        $infos .= "Battery with issues: ".$tmpInfos." - ";
    } else {
        $infos .= count($pbBatt)." Batteries OK - ";
    }
}
if ($summ) {
    $tmpInfos = "";
    for ($i = 0; $i < count($summValues); $i++) {
        $vdName = $arrayVDName[$i];
        if ($summValues[$vdName][2] != "Optimal" && $summValues[$vdName][1] != "Optimal") {
            if ($exit_code != $exit_E) {
                $state = "WARNING";
                $exit_code = $exit_W;
                if ($debug) {
                    print "warning due to VD \n";
                }
            }
            if ($tmpInfos != "") {
                $tmpInfos.= ", ";
            }
            $tmpInfos .= $summValues[$vdName][0];
        }
    }
    if ($tmpInfos != "") {
        $infos .= "NON Optimal VD: ".$tmpInfos." - ";
    } else {
        $infos .= "All VD Optimal - ";
    }
}
if ($hotspare) {
    $tmpInfos = "";
    if (isset($hsValues["total"])) {
        if ($hsValues["total"] < 1) {
            $state = "CRITICAL";
            $exit_code = $exit_E;
            if (debug) {
                print "critical due to no hot spares \n";
            }
            if ($tmpInfos != "") {
                $tmpInfos.= ", ";
            }
            $tmpInfos .= "Total: $hsValues[total]";
        }
    } else {
        $state = "UNKNOWN";
        $exit_code = $exit_U;
        if ($tmpInfos != "") {
            $tmpInfos.= ", ";
        }
        $tmpInfos .= "Total: unknown";
    }
    if (isset($hsValues["inuse"])) {
        if ($hsValues["inuse"] > 0 && $exit_code != $exit_E) {
            $state = "WARNING";
            $exit_code = $exit_W;
            if (debug) {
                print "warning due to hot spare in use \n";
            }
            if ($tmpInfos != "") {
                $tmpInfos.= ", ";
            }
            $tmpInfos .= "In use: $hsValues[total]";
        }
    } else {
        $state = "UNKNOWN";
        $exit_code = $exit_U;
        if ($tmpInfos != "") {
            $tmpInfos.= ", ";
        }
        $tmpInfos .= "In use: unknown";
    }
    if (isset($hsValues["standby"])) {
        if ($hsValues["standby"] < 1) {
            $state = "CRITICAL";
            $exit_code = $exit_E;
            if (debug) {
                print "critical due to no hot spare standbys \n";
            }
            if ($tmpInfos != "") {
                $tmpInfos.= ", ";
            }
            $tmpInfos .= "Standby: $hsValues[total]";
        }
    } else {
        $state = "UNKNOWN";
        $exit_code = $exit_U;
        if ($tmpInfos != "") {
            $tmpInfos.= ", ";
        }
        $tmpInfos .= "Standby: unknown";
    }
    if (empty($tmpInfos)) {
        $infos .= "Hot spare status OK - ";
    } else {
        $infos .= "Hot spare status NOT OK: $tmpInfos - ";
    }
}
if ($health) {
    $tmpInfos = "";
    if ($debug) {
        print "------------- path debug section --------------\n";
        print "path values: \n";
        print_r($arrayPath);
        print "------------- end of path debug --------------\n";
    }
    foreach ($arrayVDName as $i =>$vdName) {
        if (!isset($arrayPath[$vdName])) {
            continue;
        }
        if ( $arrayPath[$vdName]["Pref"] != $arrayPath[$vdName]["Curr"] ) {
            if ($exit_code != $exit_E) {
                $state = "WARNING";
                $exit_code = $exit_W;
            }
            if ($tmpInfos != "") {
                $tmpInfos.= ", ";
            }
            $tmpInfos .= $vdName;
        }
    }
    if ($tmpInfos != "") {
        $infos .= "VD on Non-Pref Path: ".$tmpInfos." - ";
    } else {
        $infos .= "VD Paths OK - ";
    }
}
if ($perf) {
    if ($debug ) {
        print "------------- perf debug section --------------\n";
        print "path values: \n";
        print_r($arrayPath);
        print "VD Names: \n";
        print_r($arrayVDName);
        print "VD Summary: \n";
        print_r($summValues);

        print "perf keys: \n";
        print_r($keysPerf);
        print "perf values: \n";
        print_r($vdPerformance);
        print "------------- end of perf debug --------------\n";
    }
    for ($col = 0; $col< count($keysPerf); $col++) {
        if (
            ($argAdd == "" || preg_match($argAdd, $keysPerf[$col]) == 1 ) &&
            ($argDel == "" || preg_match($argDel, $keysPerf[$col]) == 0 )
        ) {
            $nbVD = count($arrayVDName);
            $perfTotals[$col] = 0;

            // Add the values
            for ($vd = 0; $vd< $nbVD; $vd++) {
                $ln = $arrayVDName[$vd];
                $val = $vdPerformance[$ln][$col];
                //Total
                if (strpos($keysPerf[$col],"%") > 0 || strpos($keysPerf[$col],"Percentage") > 0) {
                    $perfTotals[$col]+= ($vdPerformance[$ln][$col]/$nbVD);
                } else {
                    $perfTotals[$col] += $val;
                }
                //Sub total per controller
                if ($path) {
                    $ctrl = $arrayPath[$ln]["Curr"];

                    if (!isset($perfTotalsC[$col][$ctrl])) $perfTotalsC[$col][$ctrl] = 0;


                    if (strpos($keysPerf[$col],"%") > 0 || strpos($keysPerf[$col],"Percentage") > 0) {
                        $perfTotalsC[$col][$ctrl] += ($vdPerformance[$ln][$col]/$nbVD);
                    } else {
                        $perfTotalsC[$col][$ctrl] += $val;
                    }
                }
                //Per Virtual Disk
                if (!$otot) {
                    if ($output_msg !== "") {
                        $output_msg .= ",";
                    }
                    $output_msg .= str_replace("Virtual Disk ","VD ",$vdPerformance[$ln][0])." ".$keysPerf[$col]." = ".$vdPerformance[$ln][$col];
                }
            }
            if (!$ntot) {
                // Add the totals
                if ($output_msg !== "") {
                    $output_msg .= ",";
                }
                $output_msg .= "Total ".$keysPerf[$col]." = ".$perfTotals[$col];
                // Add the sub totals per controller
                if ($path) {
                    for ($k = 0; $k<count($perfTotalsC[$col]); $k++) {
                        if ($output_msg !== "") {
                            $output_msg .= ",";
                        }
                        $output_msg .= "Ctrl $k ".$keysPerf[$col]." = ".$perfTotalsC[$col][$k];
                    }
                }
            }
        }
    }
}
if ($power) {
    $tmpOutput = "";
    for ($i = 0; $i < count($powerInfos); $i++) {
        if ($tmpOutput != "") {
            $tmpOutput .= ",";
        }
        $tmpOutput .= "Power Supply E".$powerInfos[$i]["E"]." S".$powerInfos[$i]["S"]." = ".$powerInfos[$i]["P"];
    }
    if ($tmpOutput != "") {
        $tmpOutput .= ",";
    }
    $tmpOutput .= "Power Supply Total = ".$totalPower;
    $output_msg.= $tmpOutput;
}

$perf_data = str_replace(" ","_",$output_msg);
//replaces the space in the labels

if ($perf && $hotspare && isset($hsValues)) {
    if ($perf_data !== "") {
        $perf_data .= " ";
    }
    $perf_data .= "hotspare_total = $hsValues[total] hotspare_standby = $hsValues[standby] hotspare_used = $hsValues[inuse]";
}

if ($failures && $health) {
    $output_msg = "$state - $infos - $failInfo - ".$output_msg;
} else {
    $output_msg = "$state - $infos ".$output_msg;
}
if ($perf_data != "") {
    $output_msg = $output_msg."|".str_replace(","," ",$perf_data);
}
if (!$noout) {
    display_output($exit_code, $output_msg);
}



//-----------//
// Functions //
//-----------//

//Function to check if controller is alive
function isAlive($ip) {
    $pingresult = exec("ping -c 3 $ip", $outcome, $status);
    if (0 == $status) {
        return true;
    } else {
        return false;
    }
}

// Function to display the output
function display_output($exit_code, $output_msg) {
    print $output_msg;
    exit($exit_code);
}

// Function to display detailed help
function help() {
print <<<EOF

Options:
--help
    Print detailed help screen
--c1
    IP of controller 1
--c2
    IP of controller 2
--mode
    optional mode to use - only one atm virtualdisks
--debug-no
    debug output without the output msg
--debug
    debug output including the output msg
--md3000
    specify if the SAN is an md3000
--battery
    output battery info
--power
    output power info - can be graphed
--sectors
    check if there are any bad sectors detected
--hotspares
    check the state of hot spares in the array - can be graphed
--health
    check battery, power, sectors, path, hot spares...
-ot
--only-totals
    output only totals, and sub totals with --path
-nt
--no-totals
    output no totals and only the value returned by the SAN
--summary
    check if the virtual disks are "optimal"
--path
    check if the virtual disks are on preferred path and output totals per controller if -nt is not specified
--perf
    check the performance
-a
    regular expression of the columns to retrieve for perf results
-r
    regular expression of the columns to remove for perf results
--help
    Print detailed help screen.
--vd
    Not implemented

EOF;
exit(0);
}
?>
